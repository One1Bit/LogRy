git init //создание репозитория из текущего каталога
git add hello.html // добавить в репозиторий файл и индексация
git commit -m "First Commit" //  (коммит) фиксация изменений " " - указывается инфа от этом коммите. 
КОГДА ВЫ ОСУЩЕСТВЛЯЕТЕ КОМАНДУ GIT ADD FILE, ВЫ НЕ ГОВОРИТЕ GIT ДОБАВИТЬ ФАЙЛ В РЕПОЗИТОРИЙ.
СКОРЕЕ ВЫ ГОВОРИТЕ, ЧТО GIT НАДО ОТМЕТИТЬ ТЕКУЩЕЕ СОСТОЯНИЕ ФАЙЛА, КОММИТ КОТОРОГО БУДЕТ ПРОИЗВЕДЕН ПОЗЖЕ.
-m коммит проиндексированных изменений. 
git add . //индексация всего каталога
git status // проверка состо€ни€ репозитория, если файлы изменятся, но не будут зафиксированы add или скоммитчены, то 
//Git укажет на это. 
git checkout //отмена изменений (для add) // перейти на версию NAME
git reset // снять предыдущую индексацию (для commit)
//коммитит (фиксирует изменения) за один раз изменения сразу двух файлов в один коммит
git add a.html
git add b.html
git commit -m "Changes for a and b"
//позволяет логически раздаелять файлы. 
checkout (переключение файлов рабочей копии на другой коммит) 
git checkout 	//отменения изменений в рабочем каталоге
Коммит, как изменение файлов с предыдущего коммита;
Коммит, как слепок – новое состояние всех файлов рабочего каталога, которое возникло после закоммиченных изменений.
git commit //вход в редактор (В самой первой строке нужно ввести название (она изначално пуста)) //Коммит всего каталога
//чтобы выйти и схоранить изменения нужно ввеси :wq + Enter (В самой нижней строке, под путем к файлу)
git log //Список всех изменений
git log --pretty=oneline // в одной строке
--author=alex, если я хочу увидеть только изменения, которые сделал я.
--pretty="..." — определяет формат вывода.
%h — укороченный хэш коммита
%d — дополнения коммита («головы» веток или теги)
%ad — дата коммита
%s — комментарий
%an — имя автора
--graph — отображает дерево коммитов в виде ASCII-графика
--date=short — сохраняет формат даты коротким и симпатичным
Можно создавать сокращения - АЛИАСЫ для win
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.br branch
git config --global alias.hist "log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short"
git config --global alias.type 'cat-file -t'
git config --global alias.dump 'cat-file -p'

  // востановление старого коммита 
  git checkout <hash> //хэш-код
  git checkout master //вернуться к последней версии
//Создание ответвления 
  git checkout -b new_branch_name
//вывод содержимого файла
cat hello.html

// ВСЕ ЭТИ БЫЛО ДЛЯ ЛОКАЛЬНОГО ХРАНИЛИЩА
////
////
git clone https://github.com/d3/d3 // скопировать репозиторый с гитхаба по ссылке.
////КОНФЛИТКЫ 
При пуле могут возникунуть конфиликты между версиями
после пула просиходит объединений (master|MERGINF) 
1.Нужно внести изменение в указанный файл. 
2.git add file
3.git commit file
теперь можно пушить
//ТЕГИ
Чтобы оставить тег нужно перейти в нужный коммит. git checkout <хеш> (или написать master, чтобы войти в главную ветку)
git tag "tag" у нужного коммита бдует тег "tag" 
Теперь по тегам можно перемещатся 
git checkout "tag" // "tag"^ - предыдущая версия коммита
//////ОТМЕНА ЛОКАЛЬНЫХ ИЗМЕНЕНИЙ....
git checkout hello.html //переключение(откат) на файл из репозиторя. Если накосячил и лень искать ошибки. Откати все так.
///////ОТМЕНА ИЗМЕНЕНИЙ ПОСЛЕ ИНДЕКСАЦИИ (ПОСЛЕ git add)
git reset HEAD hello.html \\\Команда reset сбрасывает буферную зону к HEAD. Это очищает буферную зону от изменений, которые мы только что проиндексировали.
git checkout hello.html //	после этого нужно выполнить чекаут для удаления нежелательного изменения.
////ОТМЕНА КОММИТОВ
Чтобы отменить коммит, нам необходимо сделать коммит, который удаляет изменения, сохраненные нежелательным коммитом.
git revert HEAD
Перейдите в редактор, где вы можете отредактировать коммит-сообщение по умолчанию или оставить все как есть. Сохраните и закройте файл.
\\\\\\\\\\\
\\\\УДАЛЕНИЕ КОММИТОВ
git tag oops //отметить последний(неудачный) коммит тегом.
git reset --hard v1.1 //сброс коммита к версии v1.1(Удаляет все коммиты от oops до v1.1). Коммит oops сотрется 
но удаленные коммиты все равно остаются в репозитории (но уже не в ветке мастера)
git hist -all - покажет все.
git tag -d oops //удаление тега оопс. oops больше не будет отображатся
////////Изменение сущ. коммитов.
git checkout tag/hash //верейти в нужный коммит и изменить нужный файл.
git commit --amend -m "Add an author/email comment" 
///


